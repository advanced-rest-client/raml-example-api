#%RAML 1.0
title: New API
version: v1
baseUri: http://{environment}.api.domain.com/{version}/
baseUriParameters:
  environment:
    type: string
    description: |
      API environment. The value can be one of "development", "stage" or "production"
      Development environment is avaibale for dev keys (client id).
      Stage is available internally only and keys are whitelisted for this environment. Keys that are not whitelisted will always return 404 for any call.
      Production is available for redular keys (klient ids).
    pattern: (development|stage|production)
    example: production
types:
  Image:
    description: An image object used as a part of different resources
    type: object
    properties:
      url:
        type: string
        description: The URL of the person's profile photo. To resize the image and crop it to a square, append the query string **?sz=x**, where x is the dimension in pixels of each side.
  Resource:
    description: Common properties for all resources returned by the API.
    type: object
    properties:
      etag:
        type: string
        description: ETag of this response for caching purposes. __This property will be ignored when creating an object.__
  AppPerson:
    displayName: A person resource
    description: |
      An object representing a person in the API. This object will be used in all methods returning a Person or list of persons.
    type: Resource
    properties:
      id:
        description: A unique identifier for a person. It is a 32 signs string containing alphanumeric characters.
      name:
        required: true
        example: John Smith
        description: Person full name. The input will be rejected if this property is not set while creating new object.
        type: string
        pattern: "[0-9a-zA-Z ]+"
      birthday:
        type: string
        description: The person's date of birth, represented as YYYY-MM-DD.
      gender:
        type: string
        description: |
          The person's gender. Possible values include, but are not limited to, the following values:
          * "male" - Male gender.
          * "female" - Female gender.
          * "other" - Other.
      url:
        type: string
        description: The URL of this person's profile.
      image: Image
      tagline:
        type: string
        description: The brief description (tagline) of this person.
      language:
        type: string
        description: The user's preferred language for rendering.
  Product:
    displayName: A product resource
    description: A single product representing an item in the store.
    type: Resource
    properties:
      id:
        description: Product id. It is a UUID of the database record. __This property will be ignored when creating an object.__
        pattern: "[0-9a-zA-Z]+"
      name:
        type: string
        description: Product name
        example: Acme product - mentol flavor, 500 ml.
        required: true
      quantity:
        type: number
        description: The quantity of the product in the one unit of measurement. See `unit` property for unit information.
        example: 500
        required: true
      unit:
        type: string
        description: The unit of measuremet for the quantity property.
        example: ml
        required: true
      upc:
        type: string
        pattern: "[0-9]{12,12}"
        description: The Universal Produc Code. It consists of 12 numerical digits. However, because of the integer precision limitation in JavaScript it is transfered as a string.
        example: "042100005264"
        required: true
      available:
        type: boolean
        description: Product current availability in the store. Product may be not available but the users still can order it with later delivery date.
        required: true
        example: true
  Org:
    type: object
    properties:
      onCall: Alertable # inherits all properties from type `Alertable`
      Head: Manager # inherits all properties from type `Manager`
  Person:
    type: object
    discriminator: kind # reference to the `kind` property of `Person`
    properties:
      firstname: string
      lastname: string
      title?: string
      kind: string # may be used to differenciate between classes that extend from `Person`
  Phone:
    type: string
    pattern: "^[0-9|-]+$" # defines pattern for the content of type `Phone`
  Manager:
    type: Person # inherits all properties from type `Person`
    properties:
      reports: Person[] # inherits all properties from type `Person`; array type where `[]` is a shortcut
      phone:  Phone
  Admin:
    type: Person # inherits all properties from type `Person`
    properties:
      clearanceLevel:
        enum: [ low, high ]
  AlertableAdmin:
    type: Admin # inherits all properties from type `Admin`
    properties:
      phone: Phone # inherits all properties from type `Phone`; uses shortcut syntax
  Alertable: Manager | AlertableAdmin # union type; either a `Manager` or `AlertableAdmin`
resourceTypes:
  ErrorResponse:
    get:
      responses:
        <<statusCode>>:
          body:
            application/json:
              displayName: Errored response
              type: object
              properties:
                error:
                  type: boolean
                  required: true
                  example: true
                  description: Indicate that the response is errored.
                message:
                  type: string
                  description: The error message associated with the error.
                  example: <<example>>
                  required: true
traits:
  Paginated:
    displayName: Paginated
    description: The collection of <<resourcePathName>>.
    usage: Use it when want to paginate the result.
    headers:
      X-Paginated:
        type: string
        description: Required for paginated resources. It's value is always true.
        example: "true"
        required: true
    queryParameters:
      limit:
        type: number
        description: Limit in the response list
        maximum: 300
        minimum: 1
        example: 100
        default: 25
      start:
        type: number
        description: The start entry of the list
        minimum: 0
        example: 25
        default: 0
      nextPageToken:
        type: string
        example: asdas87axJNASoHm9Hs0
        description: The `nextPageToken` is a web safe encoded cursor to the next entry in the database. It can be obtained by requesting paginated resource and used in next request to get next results page.
        pattern: "[a-zA-Z0-9]+"
    responses:
      200:
        description: Paginated response containing a single page of the result. By default one page og the results contains 25 items. You can extend it by setting a `limit` query parameter in your request.\nWhen changing parameters while using the `nextPageToken` the `nextPageToken` will be ignored and new query will be performed. Queries with `nextPageToken` should contain the same set of parameters as the first request.
        body:
          application/json:
            type: object
            properties:
              items:
                type: array
                required: true
                description: Contains a list of objects of a type given for this method and endpoint.
                items: [<<resourceType>>]
              nextPageToken:
                type: string
                required: true
                example: asdas87axJNASoHm9Hs
                description: The next page token is web safe encoded cursor to the next entry in the database. Use it in the next request to obtain next page of the results.
      400:
        description: The error response when one of the parameters is invalid and can't be parsed. Nothing can be done at the time except correcting the request to send valid data.
        body:
          application/json:
            displayName: Invalid
            type: object
            properties:
              error:
                type: boolean
                required: true
                example: true
                description: Indicate that the response is errored.
              message:
                type: string
                description: The error message associated with the error.
                example: The `limit` parameter is invalid. Please, provide a number between 1 and 300.
                required: true
securitySchemes:
  oauth_2_0: !include securitySchemes/oauth_2_0.raml
  oauth_1_0: !include securitySchemes/oauth_1_0.raml
documentation:
  - !include documentation/about.raml
  - title: Test docs
    content: |
      # A test documentation.

      This text was created by ARC's RAML editor.
securedBy: [oauth_2_0, oauth_1_0]
/people:
  displayName: People
  description: The people API used to access data about the people.
  get:
    displayName: List people
    description: Use this method to list all the people.
    is: [Paginated: {resourceType: Person}]
  post:
    displayName: Create a person
    description: Use this method to add new person
    body:
      application/json:
        type: AppPerson
  /{personId}:
    type: [ErrorResponse: {statusCode: 404, example: "User not found"}]
    displayName: A person
    description: The endpoint to access information about the person
    uriParameters:
      personId:
        type: integer
        required: true
        description: The ID of the person in the system. It is generated by the database numeric value for the person.
        example: 1234
    get:
      displayName: Get a person
      description: Returns a person
      headers:
        x-client-id:
          example: 123456-acme.client.com
          description: The application id used to make a request. It can be obtained in the developer console.
          type: string
          required: true
      responses:
        200:
          body:
            application/json:
              type: AppPerson
    delete:
      displayName: Remove a person
      description: Removes the person from the datastore. This method do not returns any data in 200 response.
      responses:
        204:
    put:
      displayName: Update a person
      description: Updates the person in the datastore.
      body:
        application/json:
          type: AppPerson
      responses:
        200:
/products:
  type: [ErrorResponse: {statusCode: 404, example: "Product not found"}]
  displayName: Products
  description: The API is to be used to access data about the products.
  get:
    displayName: List products
    description: Returns a list of products.
    is: [Paginated: {resourceType: Product}]
  post:
    displayName: Create product
    description: Creates a product in the store. While creating a product the `id` and `etag` properties will be ignored.\nThe endpoint reject the request if exactly the same product is already defined in the datastore (all their properties equals). Newly created product is available for listing but it won't be available for ordering API until it's availability is not set.
    body:
      application/json:
        type: Product
    responses:
      200:
        body:
          application/json:
            type: Product
            examples:
              Product:
                id: d697f5cea85011e680f576304dec7eb7
                name: Super product
                quantity: 125
                unit: ml
                upc: "123456789101"
                available: true
                etag: "W/\"686897696a7c876b7e\""
              OtherProduct:
                id: 123e4567e89b12d3a456426655440000
                name: Acme Product
                quantity: 1
                unit: kg
                upc: "223456789101"
                available: true
                etag: "W/\"123456789\""
      400:
        description: The request has been rejected. Probably the product already exists in the datastore.
/orgs:
  securedBy: oauth_2_0
  /{orgId}:
    get:
      responses:
        200:
          body:
            application/json:
              type: Org # reference to global type definition
              properties:
                id:
                  type: string
                  description: UUID generated ID
              example:
                id: "12345"
                onCall:
                  firstname: nico
                  lastname: ark
                  kind: admin
                  clearanceLevel: low
                  phone: "12321"
                Head:
                  firstname: nico
                  lastname: ark
                  kind: manager
                  reports:
                    -
                      firstname: nico
                      lastname: ark
                      kind: admin
                  phone: "123-23"
    put:
      body:
        application/json:
          type: Org
          properties:
            id:
              type: string
              description: UUID generated ID
      responses:
        200:
          body:
            application/json:
              type: Org
    /managers:
      get:
        responses:
          200:
            body:
              application/json:
                type: Manager[]
/messages:
  securedBy: [oauth_2_0]
  post:
    description: Post a new message
    body:
      application/json:
        type: object
        properties:
          receiver:
            type: string
            description: receiver of the message
            required: true
          body:
            type: string
            description: A message body
            required: true
          important:
            type: boolean
            description: If true then the message will be marked as important
            default: false
            required: true
